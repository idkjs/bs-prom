// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var okPromise = new Promise((function (resolve, param) {
        return resolve("ok");
      }));

Promise.resolve("easy");

Promise.reject({
      RE_EXN_ID: "Invalid_argument",
      _1: "too easy"
    });

var timer = new Promise((function (resolve, param) {
        setTimeout((function (param) {
                return resolve("Done!");
              }), 1000);
        
      }));

console.log("Handling promise values");

okPromise.then(function (value) {
      return Promise.resolve((console.log(value), undefined));
    });

console.log("----------------------");

console.log("Chaining");

Promise.resolve(1).then(function (value) {
        return Promise.resolve(value + 1 | 0);
      }).then(function (value) {
      return Promise.resolve((console.log(value), undefined));
    });

console.log("----------------------");

Promise.resolve(1).then(function (value) {
        return Promise.resolve(value + 1 | 0);
      }).then(function (value) {
      return Promise.resolve((console.log(value), undefined));
    });

Promise.resolve(1).then(function (value) {
        return Promise.resolve(value + 1 | 0);
      }).then(function (value) {
      return Promise.resolve((console.log(value), undefined));
    });

Promise.all([
        Promise.resolve(1),
        Promise.resolve("a")
      ]).then(function (param) {
      console.log("Value 1: " + String(param[0]));
      console.log("Value 2: " + param[1]);
      return Promise.resolve(undefined);
    });

Promise.all([
        Promise.resolve(1),
        Promise.resolve(2),
        Promise.resolve(3)
      ]).then(function (param) {
      if (param.length !== 3) {
        throw {
              RE_EXN_ID: "Match_failure",
              _1: [
                "Promises.re",
                63,
                7
              ],
              Error: new Error()
            };
      }
      var v1 = param[0];
      var v2 = param[1];
      var v3 = param[2];
      console.log("Value 1: " + String(v1));
      console.log("Value 2: " + String(v2));
      console.log("Value 3: " + String(v3));
      return Promise.resolve(undefined);
    });

var notFoundPromise = new Promise((function (param, reject) {
        return reject({
                    RE_EXN_ID: "Not_found"
                  });
      }));

notFoundPromise.then(function (value) {
        return Promise.resolve((console.log(value), undefined));
      }).catch(function (err) {
      return Promise.resolve((console.log(err), undefined));
    });

var Oh_no = /* @__PURE__ */Caml_exceptions.create("Promises.Oh_no");

var ohNoPromise = new Promise((function (param, reject) {
        return reject({
                    RE_EXN_ID: Oh_no,
                    _1: "oh no"
                  });
      }));

ohNoPromise.catch(function (err) {
      return Promise.resolve((console.log(err), undefined));
    });

var betterOk = new Promise((function (resolve, param) {
        return resolve({
                    TAG: /* Ok */0,
                    _0: "everything's fine"
                  });
      }));

var betterOhNo = new Promise((function (resolve, param) {
        return resolve({
                    TAG: /* Error */1,
                    _0: "nope nope nope"
                  });
      }));

function handleResult(param) {
  return param.then(function (result) {
              var tmp;
              if (result.TAG === /* Ok */0) {
                console.log("OK: " + result._0);
                tmp = undefined;
              } else {
                console.log("Oh no: " + result._0);
                tmp = undefined;
              }
              return Promise.resolve(tmp);
            });
}

handleResult(betterOk);

handleResult(betterOhNo);

function thenResolve(fn) {
  return function (param) {
    return param.then(function (value) {
                return Promise.resolve(Curry._1(fn, value));
              });
  };
}

thenResolve(function (prim) {
        console.log(prim);
        
      })(thenResolve(function (value) {
            return value + 1 | 0;
          })(Promise.resolve(1)));

function thenIgnore(fn, p) {
  thenResolve(Curry.__1(fn))(p);
  
}

exports.okPromise = okPromise;
exports.timer = timer;
exports.notFoundPromise = notFoundPromise;
exports.Oh_no = Oh_no;
exports.ohNoPromise = ohNoPromise;
exports.betterOk = betterOk;
exports.betterOhNo = betterOhNo;
exports.handleResult = handleResult;
exports.thenResolve = thenResolve;
exports.thenIgnore = thenIgnore;
/* okPromise Not a pure module */
